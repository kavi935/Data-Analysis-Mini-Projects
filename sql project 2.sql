---                                         SQL PROJECT - ONLINE LEARNING PLATFORM

--- Question Level - Easy

--Q1. Get the total number of students enrolled in each course.

SELECT c.course_name, COUNT(e.enrollment_id) AS total_students
FROM courses c
JOIN enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name
Order By total_students DESC;

--Q2. List all users who have received certificates and the courses they completed.

SELECT u.user_name, c.course_name
FROM certificates cert
JOIN users u ON cert.user_id = u.user_id
JOIN courses c ON cert.course_id = c.course_id;

--Q3. List the names and email addresses of all users who joined after May 1, 2023.

SELECT user_name, email
FROM users
WHERE join_date > '2023-05-01';

--Q4. Get the names of all users who have made payments greater than or equal to $500.

SELECT u.user_name,CONCAT('$',p.amount) as Amount
FROM payments p
JOIN users u
ON p.payment_id = u.user_id
WHERE Amount >= 500;

--Q5. Get the name of user who has scored max score or grade among other users who enrolled.

SELECT u.user_name,MAX(g.score) AS max_score
FROM users u
JOIN grades g
ON u.user_id = g.user_id
GROUP BY u.user_name
ORDER BY  max_score DESC
LIMIT 1;

--- Question Level - Medium

--Q1. Get the name of all users who has scored max score with its respective course name.

WITH k AS (
SELECT u.user_name,c.course_name,MAX(g.score) AS highest_score,
ROW_NUMBER() OVER (PARTITION BY u.user_name ORDER BY MAX(g.score) DESC) AS rownumber
FROM grades g
JOIN users u ON g.user_id = u.user_id
JOIN assesments a ON  g.assesment_id = a.assesment_id
JOIN courses c ON a.course_id = c.course_id
GROUP BY 1,2
ORDER BY 1 ASC
)
SELECT *
FROM k
WHERE rownumber <=1;

--Q2. Find the total revenue generated by each instructor from all their courses.

SELECT c.instructor,c.course_name, SUM(p.amount) AS total_revenue
FROM payments p
JOIN courses c ON p.course_id = c.course_id
GROUP BY 1,2
ORDER BY 3 DESC;

--Q3. Get the count of discussions for each course and the corresponding course details.

SELECT c.course_name, c.start_date, c.end_date, COUNT(d.discussion_id) AS discussion_count
FROM courses c
JOIN discussions d ON c.course_id = d.course_id
GROUP BY c.course_name, c.start_date, c.end_date;

--Q4. List the top 3 most enrolled courses along with the number of enrollments.

SELECT c.course_name, COUNT(e.enrollment_id) AS total_enrollments
FROM courses c
JOIN enrollments e ON c.course_id = e.course_id
GROUP BY c.course_name
ORDER BY total_enrollments DESC
LIMIT 3;

--Q5. Get the average score for each course's assessments.

SELECT c.course_name, ROUND(AVG(g.score),2) AS average_score
FROM courses c
JOIN assesments a ON c.course_id = a.course_id
JOIN grades g ON a.assesment_id = g.assesment_id
GROUP BY c.course_name
ORDER BY 2 DESC;

--- Question Level - Advanced

--Q1. Find the cumulative total payments made by each user and their average payment, ordered by the total payments.

WITH UserPayments AS (
    SELECT p.user_id, u.user_name, SUM(p.amount) AS total_payments, AVG(p.amount) AS average_payment
    FROM payments p
    JOIN users u ON p.user_id = u.user_id
    GROUP BY p.user_id, u.user_name
)
SELECT user_name, total_payments, average_payment,
       SUM(total_payments) OVER (ORDER BY total_payments DESC) AS cumulative_payments
FROM UserPayments
ORDER BY total_payments DESC;

/* Q2. Identify the user with the highest total score across all assessments. List their user name, total score,
and the number of assessments they participated in. */

 SELECT  u.user_name, SUM(g.score) AS total_score, COUNT(a.assesment_id) AS assesment_count 
 FROM grades g 
 JOIN users u
 ON g.user_id = u.user_id
 JOIN assesments a
 ON g.assesment_id = a.assesment_id
 GROUP BY 1
 ORDER BY 2 DESC
 LIMIT 1;

/* Q3. Determine the users who have not received any certificates despite enrolling in courses. List their user names,
emails, and the number of courses they have enrolled in. */

WITH v AS (
    SELECT  
        u.user_name, 
        u.email, 
        COUNT(e.course_id) AS enrollment_count 
    FROM  
        users u
    JOIN enrollments e ON u.user_id = e.user_id
    LEFT JOIN certificates cer ON u.user_id = cer.user_id
    GROUP BY u.user_id, u.user_name, u.email
    ORDER BY enrollment_count DESC
)
SELECT 
    *
FROM 
    v
WHERE 
    v.enrollment_count > 0 AND v.user_name NOT  IN 
	(SELECT u.user_name FROM certificates cer JOIN users u ON cer.user_id = u.user_id);

	
---                                    END OF PROJECT










